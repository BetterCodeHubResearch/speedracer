// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bundle a runner client with a custom port 1`] = `
"(function () {
'use strict';

class RunnerClient {
  constructor() {
    this.port = 1337;
    this.ws = new WebSocket(\`ws://localhost:\${this.port}\`);
    this.router = {
      'race:start:ack': () => this.startRace(),
      'race:finish:ack': () => this.next()
    };
    this.races = [];

    this.ws.onopen = () => {
      this.ws.onmessage = ({ data }) => this.onMessage(JSON.parse(data));
      this.send('file:start');
      this.next();
    };
  }

  enqueueRace(title, fn) {
    this.races.push({ title, fn });
  }

  next() {
    this.currentRace = this.races.shift();

    if (this.currentRace) {
      this.send('race:start', this.currentRace);
    }
    else {
      this.send('file:finish');
      this.ws.close();
    }
  }

  startRace() {
    try {
      const res = this.currentRace.fn();
      if (res && res.then) {
        res.then(() => this.finishRace());
      }
      else {
        this.finishRace();
      }
    }
    catch (err) {
      this.raceError(err);
    }
  }

  finishRace() {
    this.send('race:finish', this.currentRace);
  }

  raceError(err) {
    this.send('race:error', this.currentRace, err);
    this.finishRace();
  }

  onMessage(payload) {
    const { type } = payload;
    const handler = this.router[type];
    if (handler) {
      handler();
    }
  }

  send(type, race, err) {
    const payload = { type };
    if (race) payload.race = race;
    if (err) payload.err = err;
    this.ws.send(JSON.stringify(payload));
  }
}

const runner = new RunnerClient();

var runnerClient = (title, fn) =>
runner.enqueueRace(title, fn);

// For test purposes
var RunnerClient_1 = RunnerClient;

runnerClient.RunnerClient = RunnerClient_1;

}());
"
`;

exports[`bundle runner client 1`] = `
"(function () {
'use strict';

class RunnerClient {
  constructor() {
    this.port = 3001;
    this.ws = new WebSocket(\`ws://localhost:\${this.port}\`);
    this.router = {
      'race:start:ack': () => this.startRace(),
      'race:finish:ack': () => this.next()
    };
    this.races = [];

    this.ws.onopen = () => {
      this.ws.onmessage = ({ data }) => this.onMessage(JSON.parse(data));
      this.send('file:start');
      this.next();
    };
  }

  enqueueRace(title, fn) {
    this.races.push({ title, fn });
  }

  next() {
    this.currentRace = this.races.shift();

    if (this.currentRace) {
      this.send('race:start', this.currentRace);
    }
    else {
      this.send('file:finish');
      this.ws.close();
    }
  }

  startRace() {
    try {
      const res = this.currentRace.fn();
      if (res && res.then) {
        res.then(() => this.finishRace());
      }
      else {
        this.finishRace();
      }
    }
    catch (err) {
      this.raceError(err);
    }
  }

  finishRace() {
    this.send('race:finish', this.currentRace);
  }

  raceError(err) {
    this.send('race:error', this.currentRace, err);
    this.finishRace();
  }

  onMessage(payload) {
    const { type } = payload;
    const handler = this.router[type];
    if (handler) {
      handler();
    }
  }

  send(type, race, err) {
    const payload = { type };
    if (race) payload.race = race;
    if (err) payload.err = err;
    this.ws.send(JSON.stringify(payload));
  }
}

const runner = new RunnerClient();

var runnerClient = (title, fn) =>
runner.enqueueRace(title, fn);

// For test purposes
var RunnerClient_1 = RunnerClient;

runnerClient.RunnerClient = RunnerClient_1;

}());
"
`;

exports[`create a common js bundle 1`] = `
"var speedracer = (function () {
'use strict';

var dep = () => {};


var dep$1 = Object.freeze({
	default: dep
});

var dep$2 = ( dep$1 && dep ) || dep$1;

dep$2();

var cjs = {

};

return cjs;

}());
"
`;

exports[`create a es6 bundle 1`] = `
"(function () {
'use strict';

var dep = () => {};

dep();

}());
"
`;
